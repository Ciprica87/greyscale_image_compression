
#include stdafx.h
#include common.h
#include iostream
#include vector
#include queue
#include random
#include fstream
#include vector

using namespace std;
using stdvector;

struct HuffmanNode{
    int frequency;
    int value;
    HuffmanNode left;
    HuffmanNode right;

    HuffmanNode(int freq, uchar val)  frequency(freq), value(val), left(nullptr), right(nullptr) {}
};

struct CompareHuffmanNodes{
    bool operator()(const HuffmanNode a, const HuffmanNode b) const{
        return a-frequency  b-frequency;
    }
};

void assignBinaryCodes(HuffmanNode node, string code, vectorstring& codes)
{
    if (node == nullptr)
    {
        return;
    }
    if (node-left == nullptr && node-right == nullptr)
    {
        codes[node-value] = code;
        node-code = code;
    }
    assignBinaryCodes(node-left, code + 0, codes);
    assignBinaryCodes(node-right, code + 1, codes);
}

HuffmanNode buildHuffmanTree(vectorint frequencyVector) {
    Create a priority queue and populate it with the the nodes created with the frequnecies
    priority_queueHuffmanNode, vectorHuffmanNode, CompareHuffmanNodes priorityQueue;
    for (int i = 0; i  frequencyVector.size(); i++){
        if (frequencyVector[i]  0) {
            priorityQueue.push(new HuffmanNode(frequencyVector[i], i));
            cout  Node   i   -   frequencyVector[i]  endl;
        }
    }
    while (priorityQueue.size()  1)
    {
        Pop the two nodes with the smallest frequency
        HuffmanNode left = priorityQueue.top();
        priorityQueue.pop();
        HuffmanNode right = priorityQueue.top();
        priorityQueue.pop();

        Create a new node with a frequency equal to the sum of the frequencies of the two nodes
        HuffmanNode parent = new HuffmanNode(left-frequency + right-frequency, 0);
        parent-left = left;
        parent-right = right;

        Add the new node back to the priority queue
        priorityQueue.push(parent);

        HuffmanNode left = priorityQueue.top();
        priorityQueue.pop();
        cout  Node   left-value   -   left-frequency  endl;
    }

    The last remaining node in the priority queue is the root of the Huffman tree
    HuffmanNode root = priorityQueue.top();
    priorityQueue.pop();

    return root;
}

vectorint createFrequencyVector(vectorint pixel_data) {

    vectorint frequencyVector(256);

    for (int i = 0; i  pixel_data.size() - 1; i++) {
        frequencyVector[pixel_data[i]] ++;
    }

    for (int i = 0; i  256; i++) {
        cout  i   -   frequencyVector[i]  endl;
    }

    return frequencyVector;
}

vectorint createPixelVector(Mat_uchar img) {

    int index = 0;
    int num_pixels = img.rows  img.cols;
    vectorint pixel_data(num_pixels);

    for (int i = 0; i  img.rows; i++){
        for (int j = 0; j  img.cols; j++){
            pixel_data[index] = img(i, j);
            cout  pixel_data[index]   ;
            index++;
        }
    }

    return pixel_data;
}

char bitsToChar(stdvectorbool bits){

    Create a byte from the bool vector
    char byte = 0;
    for (int i = 0; i  8; i++)
    {
        if (bits[i])
        {
            byte = (1  (7 - i));
        }
    }
    return byte;
}

void writeDataToBinaryFile(const string& filename, vectorint pixel_data, vectorstring codes, int rows, int cols) {
    Open and clean the file
    ofstream outfile(filename, iosout, iosbinary);
    outfile.close();
    outfile.open(filename, iosout  iosbinary  iostrunc);

    Check if its open
    if (!outfile.is_open()) {
        cout  Failed to open file!n;
        return;
    }

    outfile.write(reinterpret_castconst char(&rows), sizeof(rows));
    outfile.write(reinterpret_castconst char(&cols), sizeof(cols));

    for (int i = 0; i  codes.size(); i++) {

        string code = codes[i];
        int index = i;
        unsigned char sizeChar = static_castunsigned char(code.length());
        outfile.write(reinterpret_castconst char(&index), sizeof(int));
        outfile.write(reinterpret_castconst char(&sizeChar), sizeof(unsigned char));

         Write the code bytes
        unsigned char byte = 0;
        int bitCount = 0;

        for (char bit  code) {
            byte = 1;
            if (bit == '1') {
                byte = 1;
            }
            bitCount++;

            if (bitCount == 8) {
                outfile.write(reinterpret_castconst char(&byte), sizeof(unsigned char));
                byte = 0;
                bitCount = 0;
            }
        }

         Write the remaining bits (if any) as a byte
        if (bitCount  0) {
            byte = (8 - bitCount);
            outfile.write(reinterpret_castconst char(&byte), sizeof(unsigned char));
        }
    }

    vectorbool encoded_data;

    Transforming and writing the image data to bytes
    for (int i = 0; i  pixel_data.size(); i++) {
        string code = codes[pixel_data[i]];
        for (char bit  code) {
            encoded_data.push_back(bit == '1');

            if (encoded_data.size() = 8) {
                char byte = bitsToChar(encoded_data);
                outfile.write(&byte, 1);
                cout  byte;
                encoded_data.clear();
            }
        }
    }

    Transforming and writing the overflow bits to the file
    if (!encoded_data.empty()) {

        while (encoded_data.size()  8) {
            encoded_data.push_back(false);
        }
        char byte = bitsToChar(encoded_data);
        outfile.write(&byte, 1);
    }
    
    Close the file
    outfile.close();    
}

string bytesToBinaryString(const unsigned char codeBytes[], int length) {
    string binaryString;
    for (int i = 0; i  length; i++) {
        unsigned char byte = codeBytes[i];
        for (int j = 7; j = 0; j--) {
            binaryString += ((byte  j) & 1)  1  0;
        }
    }
    return binaryString;
}


int searchInVector(const vectorstring& vec, const string& searchString) {
    for (size_t i = 0; i  vec.size(); i++) {
        if (vec[i] == searchString) {
            return i;
        }
    }
    return -1;   Return -1 if the string is not found
}

void readHeaderDataFromBinaryFile(const string& filename, vectorstring& codes, int& rows, int& cols) {
    ifstream infile(filename, iosin  iosbinary);

    if (!infile.is_open()) {
        cout  Failed to open file!n;
        return;
    }
    the header of the data
    infile.read(reinterpret_castchar(&rows), sizeof(rows));
    infile.read(reinterpret_castchar(&cols), sizeof(cols));

    for (int i = 0; i  256; i++) {
        int index;
        unsigned char sizeChar;
        string code;

        infile.read(reinterpret_castchar(&index), sizeof(int));
        infile.read(reinterpret_castchar(&sizeChar), sizeof(unsigned char));

        int length = static_castint(sizeChar);
        int byteLength = (length % 8 != 0)  ((length + 7)  8)  (length  8);
        unsigned char codeBytes = new unsigned char[byteLength];

        for (int b = 0; b  byteLength; b++) {
            infile.read(reinterpret_castchar(&codeBytes[b]), sizeof(unsigned char));
        }

        code = bytesToBinaryString(codeBytes, byteLength);

        if (code.length()  length) {
            code = code.substr(0, length);
        }

        codes[index] = code;

        delete[] codeBytes;
    }

    the bulk of the data
    Mat_uchar img(rows, cols);
    string result = ;

    for (int i = 0; i  rows; i++) {
        for (int j = 0; j  cols; j++) {

            bool flag = true;

            while(flag) {
                char buffer;

                infile.get(buffer);
                unsigned char byte = static_castunsigned char(buffer);

                for (int k = 7; k = 0; --k) {

                    char bit = ((byte & (1  k))  '1'  '0');
                    result += bit;

                    if (searchInVector(codes, result) != -1) {
                        img(i, j) = searchInVector(codes, result);
                        result.clear();
                        flag = false;

                    }
                }
            }  
        }
    }
    

    imshow(copii gay, img);
    waitKey();

    infile.close();
}


void encodeData(Mat_uchar img) {
    vectorint pixelData = createPixelVector(img);
    vectorint frequencyVector = createFrequencyVector(pixelData);
    HuffmanNode root = buildHuffmanTree(frequencyVector);
    const string& filename = output.bin;
    vectorstring codes(256);

    assignBinaryCodes(root, , codes);

    writeDataToBinaryFile(filename, pixelData, codes, img.rows, img.cols);

    vectorstring decompressedCodes(256);
    int rows, cols;
    readHeaderDataFromBinaryFile(filename, decompressedCodes, rows, cols);

    for (int i = 0; i  256; i++) {
        cout  Pixel   i    Code   decompressedCodes[i]  endl;
    }

    cout  rows     cols;
}

int main()
{
	Mat_uchar img = imread(Imagescamera.bmp, IMREAD_GRAYSCALE);

     Check if the image was successfully loaded
    if (img.empty())
    {
        cout  Failed to load image.  endl;
        return -1;
    }

    encodeData(img);

	return 0;
}